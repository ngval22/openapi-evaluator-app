import { ScoreCard } from '../scoring-engine/types';
import chalk from 'chalk';

// announcer class to generate console reports of the findings.
export class Announcer {
    generateConsoleReport(report: ScoreCard): void {
        console.log(chalk.bold('\nOUR JUDGES SCORED YOUR OPENAPI SPECIFICATION\n'));
        console.log(chalk.bold(`Overall Score: ${report.overallScore}/100 (Grade: ${report.grade})\n`));

        console.log(chalk.bold('Category Scores:'));
        report.categoryScores.forEach(category => {
            const color = category.percentage >= 70 ? 'green' : category.percentage >= 50 ? 'yellow' : 'red';
            console.log(chalk[color](`  ${category.name}: ${category.score}/${category.maxScore} (${category.percentage}%)`));
        });

        console.log(chalk.bold('\nViolations:'));
        if (report.violations.length === 0) {
            console.log(chalk.green('  No violations found!'));
        } else {
            report.violations.forEach(violation => {
                if (!(violation.severity === 'info')) {
                    const color = violation.severity === 'error' ? 'red' : violation.severity === 'warning' ? 'yellow' : 'blue';
                    console.log(chalk[color](`  [${violation.severity.toUpperCase()}] ${violation.path}${violation.operation ? ` (${violation.operation})` : ''} â†’ ${violation.location}`));
                    console.log(`    ${violation.message}`);
                    console.log(chalk.green(`    Suggestion: ${violation.suggestion}\n`));
                };
            });
        }
    }

    generateMarkdownReport(report: ScoreCard): string {
        let markdown = `# OpenAPI Specification Evaluation Report\n\n`;
        
        // Overall score and grade
        markdown += `## Summary\n\n`;
        markdown += `**Overall Score:** ${report.overallScore}/100\n\n`;
        markdown += `**Grade:** ${report.grade}\n\n`;
        
        // Category scores
        markdown += `## Category Scores\n\n`;
        markdown += `| Category | Score | Maximum | Percentage |\n`;
        markdown += `|----------|-------|---------|------------|\n`;
        
        report.categoryScores.forEach(category => {
            markdown += `| ${category.name} | ${category.score} | ${category.maxScore} | ${category.percentage}% |\n`;
        });
        
        markdown += `\n`;
        
        // Violations
        markdown += `## Violations\n\n`;
        
        if (report.violations.length === 0) {
            markdown += `No violations found! ðŸŽ‰\n`;
        } else {
            // Group violations by severity
            const errorViolations = report.violations.filter(v => v.severity === 'error');
            const warningViolations = report.violations.filter(v => v.severity === 'warning');
            const infoViolations = report.violations.filter(v => v.severity === 'info');
            
            // Errors
            if (errorViolations.length > 0) {
                markdown += `### Errors\n\n`;
                errorViolations.forEach(violation => {
                    markdown += `#### ${violation.path}${violation.operation ? ` (${violation.operation})` : ''} â†’ ${violation.location}\n\n`;
                    markdown += `**Issue:** ${violation.message}\n\n`;
                    markdown += `**Suggestion:** ${violation.suggestion}\n\n`;
                    markdown += `---\n\n`;
                });
            }
            
            // Warnings
            if (warningViolations.length > 0) {
                markdown += `### Warnings\n\n`;
                warningViolations.forEach(violation => {
                    markdown += `#### ${violation.path}${violation.operation ? ` (${violation.operation})` : ''} â†’ ${violation.location}\n\n`;
                    markdown += `**Issue:** ${violation.message}\n\n`;
                    markdown += `**Suggestion:** ${violation.suggestion}\n\n`;
                    markdown += `---\n\n`;
                });
            }
            
            // Info (optional)
            if (infoViolations.length > 0) {
                markdown += `### Informational\n\n`;
                infoViolations.forEach(violation => {
                    markdown += `#### ${violation.path}${violation.operation ? ` (${violation.operation})` : ''} â†’ ${violation.location}\n\n`;
                    markdown += `**Note:** ${violation.message}\n\n`;
                    markdown += `**Suggestion:** ${violation.suggestion}\n\n`;
                    markdown += `---\n\n`;
                });
            }
        }
        
        // Footer
        markdown += `\n\n*Generated by OpenAPI Evaluator App on ${new Date().toLocaleString()}*`;
        
        return markdown;
    }

    generateHtmlReport(report: ScoreCard): string {
        // Helper function to get color based on percentage
        const getColorClass = (percentage: number): string => {
            return percentage >= 70 ? 'success' : percentage >= 50 ? 'warning' : 'danger';
        };
        
        // Helper function to get severity badge
        const getSeverityBadge = (severity: string): string => {
            const badgeClass = severity === 'error' ? 'danger' : 
                              severity === 'warning' ? 'warning' : 'info';
            return `<span class="badge bg-${badgeClass}">${severity.toUpperCase()}</span>`;
        };

        let html = `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>OpenAPI Specification Evaluation Report</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body { padding: 20px; }
        .header { margin-bottom: 30px; }
        .score-card { margin-bottom: 30px; }
        .violations { margin-top: 30px; }
        .violation-item { margin-bottom: 20px; padding: 15px; border-radius: 5px; }
        .footer { margin-top: 50px; text-align: center; font-size: 0.8em; color: #6c757d; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>OpenAPI Specification Evaluation Report</h1>
            <p class="lead">Evaluation completed on ${new Date().toLocaleString()}</p>
        </div>

        <div class="score-card">
            <div class="card">
                <div class="card-header">
                    <h2>Summary</h2>
                </div>
                <div class="card-body">
                    <h3>Overall Score: <span class="badge bg-${getColorClass(report.overallScore)}">${report.overallScore}/100</span></h3>
                    <h4>Grade: ${report.grade}</h4>
                </div>
            </div>
        </div>

        <div class="category-scores">
            <h2>Category Scores</h2>
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Category</th>
                        <th>Score</th>
                        <th>Maximum</th>
                        <th>Percentage</th>
                    </tr>
                </thead>
                <tbody>`;
        
        report.categoryScores.forEach(category => {
            html += `
                    <tr>
                        <td>${category.name}</td>
                        <td>${category.score}</td>
                        <td>${category.maxScore}</td>
                        <td><span class="badge bg-${getColorClass(category.percentage)}">${category.percentage}%</span></td>
                    </tr>`;
        });
        
        html += `
                </tbody>
            </table>
        </div>

        <div class="violations">
            <h2>Violations</h2>`;
        
        if (report.violations.length === 0) {
            html += `
            <div class="alert alert-success">
                <h4>No violations found! ðŸŽ‰</h4>
                <p>Your OpenAPI specification looks great!</p>
            </div>`;
        } else {
            // Group violations by severity
            const errorViolations = report.violations.filter(v => v.severity === 'error');
            const warningViolations = report.violations.filter(v => v.severity === 'warning');
            const infoViolations = report.violations.filter(v => v.severity === 'info');
            
            // Errors
            if (errorViolations.length > 0) {
                html += `
                <h3>Errors</h3>
                <div class="list-group">`;
                
                errorViolations.forEach(violation => {
                    html += `
                    <div class="list-group-item list-group-item-danger">
                        <h5 class="mb-1">${violation.path}${violation.operation ? ` (${violation.operation})` : ''} â†’ ${violation.location}</h5>
                        <p class="mb-1"><strong>Issue:</strong> ${violation.message}</p>
                        <p class="mb-1"><strong>Suggestion:</strong> ${violation.suggestion}</p>
                    </div>`;
                });
                
                html += `
                </div>`;
            }
            
            // Warnings
            if (warningViolations.length > 0) {
                html += `
                <h3 class="mt-4">Warnings</h3>
                <div class="list-group">`;
                
                warningViolations.forEach(violation => {
                    html += `
                    <div class="list-group-item list-group-item-warning">
                        <h5 class="mb-1">${violation.path}${violation.operation ? ` (${violation.operation})` : ''} â†’ ${violation.location}</h5>
                        <p class="mb-1"><strong>Issue:</strong> ${violation.message}</p>
                        <p class="mb-1"><strong>Suggestion:</strong> ${violation.suggestion}</p>
                    </div>`;
                });
                
                html += `
                </div>`;
            }
            
            // Info
            if (infoViolations.length > 0) {
                html += `
                <h3 class="mt-4">Informational</h3>
                <div class="list-group">`;
                
                infoViolations.forEach(violation => {
                    html += `
                    <div class="list-group-item list-group-item-info">
                        <h5 class="mb-1">${violation.path}${violation.operation ? ` (${violation.operation})` : ''} â†’ ${violation.location}</h5>
                        <p class="mb-1"><strong>Note:</strong> ${violation.message}</p>
                        <p class="mb-1"><strong>Suggestion:</strong> ${violation.suggestion}</p>
                    </div>`;
                });
                
                html += `
                </div>`;
            }
        }
        
        html += `
        </div>

        <div class="footer">
            <p>Generated by OpenAPI Evaluator App on ${new Date().toLocaleString()}</p>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>`;
        
        return html;
    }
}

